using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Events;
using System.Net;
using UnityEngine.Networking;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

[Serializable]
class Data {
    public string type;
    public string data;
    public string check;
    public void cleardata() {
        type = "";
        data = "";
    }
}
public class TimeVerifier : MonoBehaviour {
    public static bool b_dataready = false;
    static TimeVerifier instance_singlestone = null;  
    public string file_path;
    public string file_name= "/data.bin";
    Data data = new Data();
    public string timeURL = "http://cgi.im.qq.com/cgi-bin/cgi_svrtime";
    public static bool _Locker;
	string vType;
    public  int _year, _month, _day, _hours, _minute;
    public string vCode;
    public string vTime;
    public AudioClip aCodeConfirm, aTimeConfirm;
    public AudioSource aAudioPlayer;
    short [] a = new short[10];
    static string d = "00000000";
    public static string getvaliddata() {
        return d;
    }
    private void Awake()
    {
        _Locker = false;
        LoadTimeLocal ();
        if (instance_singlestone == null)
        {
            DontDestroyOnLoad(transform.gameObject);
            instance_singlestone = this;
        }
        else
        {
            gameObject.SetActive(false);
        }
    }
    void Start()
    {
        switch (vType) {
		case "date":
                _Locker = true;
                StartCoroutine(GetTime());
              
            break;
        case "time":
                string str = "";
                str = PlayerPrefs.GetString("type");
                if (str != "time")
                {
                    PlayerPrefs.SetString("type", "time");
                    PlayerPrefs.SetString("data", _minute.ToString());
                }
                else {
                    _minute = Convert.ToInt32(PlayerPrefs.GetString("data"));
                }
                break;
		default:
			break;
		}

    }
	public static float tTimeToLock;
    void FixedUpdate()
    {
        // 若确定上锁则执行
        if (_Locker) {
            tTimeToLock += Time.fixedDeltaTime;
           // Debug.Log(tTimeToLock);
            if (tTimeToLock >= 100) {
				// 30秒后执行的动作
				Application.Quit();            
			}
		}
	
	}
	public float timer = 0;
	void TimeUseRecord(){
		if (vType == "time") {
			if (timer < 60) {
				timer += Time.fixedDeltaTime;
                Debug.Log("TimeUseRecord"+timer.ToString());         
            } 
			else {
                _minute--;
                //_minute /= 10;

                SaveTimeUse ();
				timer = 0;
			}       
            // 可用时间小于零后上锁
            if (_minute <= 0) {
				_Locker = true;
			}
		}
	}
    private void OnGUI()
    {
     
    }
    void LoadTimeLocal()
    {

        getdata(ref vType,ref d);

        switch (vType) {
		case "date":
			if (d.Length >= 8) {
				_year = int.Parse(d.Substring(0, 4));
				_month = int.Parse(d.Substring(4, 2));
				_day = int.Parse(d.Substring(6, 2));
			}
			break;
		case "time":
            _minute = Convert.ToInt32(d);
            break;
		default:
			break;
		}
    }
	void SaveTimeUse(){
       // setdata("time", (_minute).ToString());
        PlayerPrefs.SetString("data", _minute.ToString());
    }
    IEnumerator GetTime()
    {
        WWW www = new WWW(timeURL);
        while (!www.isDone)
        {
            yield return www;
        }
        SplitTime(www.text);
        b_dataready = true;
    }
    void SplitTime(string dateTime)
    {
        int year, mouth, day, hour, min, sec;
        dateTime = dateTime.Replace("-", "|");
        dateTime = dateTime.Replace(" ", "|");
        dateTime = dateTime.Replace(":", "|");
        string[] Times = dateTime.Split('|');
        year = int.Parse(Times[0]);
        mouth = int.Parse(Times[1]);
        day = int.Parse(Times[2]);
        hour = int.Parse(Times[3]);
        min = int.Parse(Times[4]);
        sec = int.Parse(Times[5]);
        DateTime setdata = new DateTime(_year, _month, _day);
        DateTime currentdata = new DateTime(year, mouth, day);
        if (setdata >= currentdata)
        {
            _Locker = false;
        }
        else {
            _Locker = true;
        }
    }
    public void setdata(string type,string value) {    
        data.type = string_encrypt(type);
        data.data = string_encrypt(value);
        generate_data_crc(ref data);//crc is generated by data which is encrypted
        data.check = string_encrypt(data.check);//then encrypt the crc value
        file_path = Application.dataPath + file_name;
        //////////////////////////////////////////
        string loadedData = JsonUtility.ToJson(data);
        using (StreamWriter sw = new StreamWriter(file_path))
        {
            sw.Write(loadedData);
            sw.Close();
        }
        /////////////////////////
    }
    public void getdata(ref string _type,ref string _value)
    {
        FileStream stream;
        file_path = Application.dataPath + file_name;
        if (File.Exists(file_path))
        {
           // stream = new FileStream(file_path, FileMode.Open);
           // BinaryFormatter bFormat = new BinaryFormatter();
            try
            {
                //data = (Data)bFormat.Deserialize(stream);
                //反序列化得到的是一个object对象.必须做下类型转换
                using (TextReader tr = new StreamReader(file_path))
                {
                    string dataAsJson = tr.ReadToEnd();
                    data = JsonUtility.FromJson<Data>(dataAsJson);
                    tr.Close();
                }             
                string check = string_decrypt(data.check);//decrypt the crc from read-data
                generate_data_crc(ref data);//recalculate crc
                if (check == data.check)
                {//data is reliable by data which is encrypted
                    _type = string_decrypt(data.type);//decrypt data
                    _value = string_decrypt(data.data);
                //    Debug.Log(data.type + " w" + _value);
                }
                else
                {//data is unreliable it is changed by someone
                    _Locker = true;
                    b_dataready = true;
                }
            }
            catch (Exception e)// data is changed by someone
            {
                _Locker = true;
                b_dataready = true;
            }
            finally {
               // stream.Close();
            }                   


        }
        else {
            _Locker = true;
            b_dataready = true;
        }

    }
    int key = (char)5;
    string string_encrypt(string str) {
        char[] ori = str.ToCharArray();
        int len = str.Length;
        char[] cy = new char[len];
        for (int i = 0; i < len; i++) {
            cy[i] = (char)((ori[i])^(key+ (156 - i))) ;
        }
        string s_encypted = new string(cy);
        return s_encypted;
    }
    string string_decrypt(string str) {
        char[] ori = str.ToCharArray();
        int len = str.Length;
        char[] cy = new char[len];
        for (int i = 0; i < len; i++)
        {
            cy[i] = (char)((ori[i]) ^ (key+(156-i)));
        }
        string s_encypted = new string(cy);
        return s_encypted;
    }

    short crc16_word(short word_in, short crc_in)
    {
         char c = (char)0;
        int crc =(short)(crc_in ^ word_in);
        int i;
        for (i = 0; i < 16; i++)
        {
            c = (char)((crc & 0x8000)!=0 ? 1 : 0);
            crc <<= 1;
            if (c>0)
                crc ^= 0x8005;
        }
        return (short)crc;
    }
    void generate_data_crc(ref Data data) {
        short init_crc = 0;
        string temp = data.type + data.data;
        char[] ori = temp.ToCharArray();
        int str_len = temp.Length;
        for (int i = 0; i < str_len; i++) {
            init_crc = crc16_word((short)ori[i], init_crc);
        }
        data.check = init_crc.ToString();
    }
}
